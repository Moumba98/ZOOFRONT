import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private isAuthenticated = new BehaviorSubject<boolean>(this.hasToken());
  isLoggedIn$ = this.isAuthenticated.asObservable(); // Observable pour √©couter les changements

  constructor() {}

  // V√©rifie si un token existe
  private hasToken(): boolean {
    return !!localStorage.getItem('authToken');
  }

  // V√©rifie si l'utilisateur est connect√©
  isLoggedIn(): boolean {
    return this.hasToken();
  }

  // V√©rifie si l'utilisateur a un r√¥le admin
  isAdmin(): boolean {
    const role = localStorage.getItem('role');
    return role === 'admin';
  }

  // Connexion : stocke le token et met √† jour l'√©tat
  login(token: string, role: string) {
    localStorage.setItem('authToken', token);
    localStorage.setItem('role', role);
    this.isAuthenticated.next(true); // ‚ö° Notifie que l'utilisateur est connect√©
  }

  // D√©connexion : supprime les donn√©es et met √† jour l'√©tat
  logout(): void {
    localStorage.removeItem('authToken');
    localStorage.removeItem('role');
    this.isAuthenticated.next(false); // ‚ö° Notifie que l'utilisateur est d√©connect√©
  }

  // üöÄ Nouvelle m√©thode pour forcer la mise √† jour apr√®s redirection
  checkLoginStatus() {
    const loggedIn = this.hasToken();
    this.isAuthenticated.next(loggedIn);
  }
}
